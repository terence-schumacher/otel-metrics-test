# Default values for otel-metrics-test.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  environment: development
  domain: invsta.systems

app:
  name: fastapi-otel-metrics
    # Environment variables
  env:
  - name: HOST
    value: "0.0.0.0"
  - name: PORT
    value: "8000"
  - name: LOG_LEVEL
    value: "INFO"
  - name: OTEL_EXPORTER_OTLP_ENDPOINT
    value: "http://otel-collector:4318"
  - name: OTEL_SERVICE_NAME
    value: "fastapi-otel-metrics"
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "deployment.environment=$(ENVIRONMENT),service.namespace=$(NAMESPACE)"
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 3

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: us-west1-docker.pkg.dev/invisible-sre-sandbox/terence-test/otel-collector
    # This sets the pull policy for images.
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  # Secrets from Google Secret Manager via External Secrets Operator
  secrets:
    enabled: false
    # Example:
    # - name: DATABASE_URL
    #   secretName: fastapi-db-credentials
    #   key: url

  # Pod annotations for Workload Identity
  podAnnotations:
    prometheus.io/scrape: "false"  # We use ServiceMonitor instead
    # iam.gke.io/gcp-service-account: "fastapi-metrics@invisible-data-platform.iam.gserviceaccount.com"

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    create: true
    annotations: {}
    name: "fastapi-otel-metrics"

  service:
    type: ClusterIP
    port: 80
    targetPort: 8000
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  ## This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /health
      port: 8000
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - fastapi-otel-metrics
            topologyKey: kubernetes.io/hostname
# OpenTelemetry Collector
otelCollector:
  enabled: true
  name: otel-collector
  replicaCount: 2

  image:
    repository: otel/opentelemetry-collector-contrib
    tag: "0.137.0"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    ports:
      otlpHttp: 4318
      otlpGrpc: 4317
      prometheus: 8889
      health: 13133
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    # Config for the collector
  config:
    receivers:
      otlp:
        protocols:
          http:
            endpoint: 0.0.0.0:4318
          grpc:
            endpoint: 0.0.0.0:4317
    processors:
      batch:
        timeout: 10s
        send_batch_size: 1024
        send_batch_max_size: 2048
      memory_limiter:
        check_interval: 1s
        limit_mib: 768
        spike_limit_mib: 256
      resource:
        attributes:
          - key: k8s.cluster.name
            value: "otel-metrics-cluster"
            action: insert
          - key: k8s.namespace.name
            from_attribute: k8s.namespace.name
            action: insert
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
              - from: connection

    exporters:
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: "otel-fastapi"
        const_labels:
          cluster: "otel-metrics-cluster"
        enable_open_metrics: true
        resource_to_telemetry_conversion:
          enabled: true

      logging:
        loglevel: info
        sampling_initial: 5
        sampling_thereafter: 200

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679
    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, k8sattributes, batch, resource]
          exporters: [prometheus, debug]
      telemetry:
        logs:
          level: info
        metrics:
          level: detailed
          address: 0.0.0.0:8888
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
      labels:
        prometheus: kube-prometheus
      relabelings: []
      metricRelabelings: []

      # RBAC for k8sattributes processor
      rbac:
        create: true

      serviceAccount:
        create: true
        annotations: { }
        name: "otel-collector"

      podAnnotations: { }

      nodeSelector: { }
      # cloud.google.com/gke-nodepool: observability-pool

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - otel-collector
                topologyKey: kubernetes.io/hostname

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"  # or "gce" for GCE ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # For GCE ingress:
    # kubernetes.io/ingress.class: "gce"
    # kubernetes.io/ingress.global-static-ip-name: "fastapi-metrics-ip"
  hosts:
    - host: otel-metrics.invsta.systems
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: otel-metrics-tls
      hosts:
        - otel-metrics.invsta.systems

# Prometheus ServiceMonitor for the FastAPI app itself
prometheus:
  serviceMonitor:
    enabled: true  # Set to true if app exposes Prometheus metrics directly
    interval: 30s
    path: /metrics
    labels:
      prometheus: kube-prometheus